=head1 NAME

Web::DOM - A Perl DOM implementation

=head1 SYNOPSIS

  use Web::DOM::Document;
  
  my $doc = new Web::DOM::Document;
  my $el = $doc->create_element ('a');
  $el->set_attribute (href => 'http://www.whatwg.org/');
  $doc->append_child ($el);

=head1 DESCRIPTION

The C<Web::DOM> modules is a pure-Perl DOM implementation.  It
implements various Web standard specifications, including DOM Living
Standard and HTML Living Standard.

=head1 USAGE

The L<Web::DOM::Document> module provides the C<new> method returning
a new document object, which corresponds to the C<new Document ()>
constructor in JavaScript Web browser environment.

  my $doc = new Web::DOM::Document;

Using the document object, the application can create various DOM
object, using standard DOM methods:

  my $el = $doc->create_element ('p'); # HTML element
  my $el = $doc->create_element_ns ($nsurl, $qname);
  $el->set_attribute (class => 'hoge fuga');
  my $text = $doc->create_text_node ('text');
  my $comment = $doc->create_comment ('data');

Please note that DOM attributes and methods are available in
perllish_underscored_name rather than domSpecificationsCamelCaseName.

Alternatively, you can instantiate the document object from an HTML or
XML string, using the C<DOMParser> interface:

  my $parser = new Web::DOM::Parser;
  my $doc = $parser->parse_from_string ($string, 'text/html');
  my $doc = $parser->parse_from_string ($string, 'application/xhtml+xml');

Your favorite query methods are also available:

  $el = $doc->get_element_by_id ('site-logo');
  $el = $doc->query_selector ('article > p:first-child');
  $col = $doc->get_elements_by_tag_name ('p');
  $col = $doc->get_elements_by_class_name ('blog-entry');
  $col = $doc->images;

For more information, see documentation of relevant modules.  For
example, methods available on the document object is listed in the
L<Web::DOM::Document> documentation.  Frequently used modules include:

=over 4

=item L<Web::DOM::Document>

The C<Document> interface.

=item L<Web::DOM::Element>

The C<Element> interface.

=item L<Web::DOM::Exception>

The C<DOMException> interface.

=item L<Web::DOM::HTMLCollection>

The C<HTMLCollection> interface.

=item L<Web::DOM::Parser>

The C<DOMParser> interface.

=back

=head1 DOM MAPPING

The modules implement the manakai's DOM Perl Binding specification
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai%27s%20DOM%20Perl%20Binding>,
which defines the mapping between WebIDL/DOM and Perl.

As a general rule, the object implementing the DOM interface I<I> is
an instance of the class (or the class that is a subclass of the
class) C<Web::DOM::I>.  However, applications should not rely on this,
as the class inheritance hierarchy could be different from the
interface's one, and could be changed in future revision of the module
implementation.  In particular, applications should not test whether
the object is an instance of the interface that is defined with the
C<[NoInterfaceObject]> extended attribute.  For example, the
C<ParentNode> interface is defined with the extended attribute.  The
L<Web::DOM::Document> class inherits the L<Web::DOM::ParentNode>
class, as the C<Document> interface implements the C<ParentNode>
interface according to the DOM Standard, but applications should not
test C<< $node->isa ('Web::DOM::ParentNode') >>.

The constructor of a DOM interface, if any, is implemented as the
C<new> class method.  For example, the constructor of the C<Document>
interface can be invoked by C<< Web::DOM::Document->new >>.

Attributes, methods, and constants of a DOM interface can be
accessible as methods of the object implementing the interface.  For
example, the C<innerHTML> attribute of the C<Element> interface is
accessible as the C<inner_html> method of the element objects.  If a
method corresponding to the attribute is invoked with no argument, it
acts as the getter of the attribute.  If the method is invoked with an
argument, it acts as the setter of the attribute.

  $string_returned_by_getter = $el->inner_html;
  $el->inner_html ($string_received_by_setter);
  
  $string_returned_by_method = $el->get_attribute ($string);
  
  $el->node_type == $el->ELEMENT_NODE;

Some objects accept array operations:

  @children = @{$el->child_nodes};
  $length = @{$el->child_nodes};
  
  $first_child = $el->child_nodes->[0];
  $second_child = $el->child_nodes->[1];
  $second_last_child = $el->child_nodes->[-2];

=head1 CONSTRUCTORS

Following classes have the constructor (i.e. the C<new> method):

=over 4

=item L<Web::DOM::Document>

=item L<Web::DOM::DOMError>

=item L<Web::DOM::Event> and its subclasses

=item L<Web::DOM::Implementation>

=item L<Web::DOM::Parser>

=item L<Web::DOM::XMLSerializer>

=back

=head1 CONSTANTS

Following modules export constants (by loading them using the C<use>
statement):

=over 4

=item L<Web::DOM::Attr>

=item L<Web::DOM::AttributeDefinition>

=item L<Web::DOM::Event>

=item L<Web::DOM::Exception>

=item L<Web::DOM::HTMLTrackElement>

=item L<Web::DOM::KeyboardEvent>

=item L<Web::DOM::Node>

=item L<Web::DOM::NodeFilter>

=item L<Web::DOM::WheelEvent>

=back

=head1 NOTE ON PRIVATE METHODS

Some classes contain private methods and variables.  Applications must
not invoke or use them.  As a general rule methods with name starting
by C<_> is private, although there might be exceptions.  Anything
EXCEPT for followings are private and should not be used:

=over 4

=item DOM APIs as documented in relevant pod documentation

For example, C<Web::DOM::Node::child_nodes>,
C<Web::DOM::Implementation::create_document>, C<Web::DOM::Event::new>,
and C<Web::DOM::Node::ELEMENT_NODE> are explicitly mentioned in their
pod section.

=item Perl standard operations

For example, C<can> and C<isa> methods of any object, C<""> and C<0+>
operation of any object, C<$Web::DOM::Document::VERSION> variable,
C<use Web::DOM::Node> operation (which implicitly invokes the
C<Web::DOM::Node::import> method).

Applications can also rely on C<isa> method with class name derived
from DOM interface name whose definition does not contain
C<[NoInterfaceObject]>.  For example, C<< $object->isa
('Web::DOM::Node') >> does (and will) work as intended, while C<<
$object->isa ('Web::DOM::CanvasPathMethod') >> (defined with
C<[NoInterfaceObject]>) or C<< $object->isa ('Web::DOM::StringArray')
>> (not derived from a DOM interface name) might not.  However, it is
not considered a good practice to compare objects by its class name in
sophiscated object-oriented programs.

=back

Public APIs are not intended to be changed backward incompatibly in
later stage of the development of these modules unless it is really
necessary for some significant reasons (e.g. security concerns, or to
resolve spec compatibility issues).  Anything else could be changed,
including package/file mapping of classes which do not provide
constructors or constants.

=head1 SPECIFICATIONS

Specifications defining features supported by the modules include:

=over

=item DOM and Selectors API

DOM Standard <http://dom.spec.whatwg.org/>.

DOM Standard - Selectors API
<https://github.com/whatwg/dom/pull/4/files>.

=item DOMPARSING

DOM Parsing and Serialization Standard
<http://domparsing.spec.whatwg.org/>.

=item DOM3CORE

Document Object Model (DOM) Level 3 Core Specification
<http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/DOM3-Core.html>.

=item HTML

HTML Standard <http://www.whatwg.org/specs/web-apps/current-work/>.

=item DOMDTDEF

DOM Document Type Definitions
<http://suika.suikawiki.org/www/markup/xml/domdtdef/domdtdef>.

=item DOMPERL

manakai's DOM Perl Binding
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai%27s%20DOM%20Perl%20Binding>.

=item MANAKAI

manakai DOM Extensions
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai%20DOM%20Extensions>.

=back

For the complete list of relevant specifications, see documentations
of the modules.

=head1 DEPENDENCY

The modules require Perl 5.8 or later.

The only fatal dependency is the perl-charclass package
<https://github.com/wakaba/perl-charclass>, which is the submodule of
the Git repository.

Following features require the perl-web-markup package
<https://github.com/manakai/perl-web-markup> (L<Web::HTML::Parser> and
its family): C<inner_html>, C<outer_html>, C<insert_adjacent_html>,
C<DOMParser>, and C<XMLSerializer>.

Following features require the L<Web::CSS::Selectors::API> module in
the perl-web-css package <https://github.com/manakai/perl-web-css>:
C<query_selector> and C<query_selector_all>.

Features performing URL-related operations require the perl-web-url
package <https://github.com/manakai/perl-web-url>, which depends on
the perl-web-encodings package
<https://github.com/manakai/perl-web-encodings>.  Such features
include: C<base_uri>, C<manakai_set_url>, C<manakai_entity_uri>,
C<manakai_entity_base_uri>, C<declaration_base_uri>,
C<manakai_declaration_base_uri>, C<action>, C<cite>, C<codebase>,
C<data>, C<formaction>, C<href>, C<longdesc>, C<object>, C<ping>,
C<poster>, and C<src>.

Following features require the XXX module: C<value> of
L<Web::DOM::AtomDateConstruct>.

=head1 DEVELOPMENT

Latest version of the modules is available from the GitHub repository:
<https://github.com/manakai/perl-web-dom>.

Test results can be reviewed at:
<https://travis-ci.org/manakai/perl-web-dom>.

=head1 HISTORY

The manakai project has been developed several generations of DOM
implementation.  The current DOM3 implementation
<https://github.com/wakaba/manakai/tree/master/lib/Message/DOM> had
been worked since 2007.

The C<Web::DOM> modules has been developed as replacement for those
modules, supporting the current DOM Standard.  It does not reuse most
of the code of the older implementation, and many useless DOM3
features are not implemented.  However, it does implement some DOM3
features that is really necessary for backward compatibility, as well
as non-standard manakai extensions.  It should be possible for
applications using the old implementation to migrate to the new
implementation by just replacing class name and as such.

=head2 Obsolete features

Following features fully or partially implemented in previous versions
of manakai DOM implementations are considered obsolete and will not be
implemented by these modules unless they are reintroduced by some DOM
specification or found to be necessary for backward compatibility:

DOMImplementationRegistry, DOMImplementationSource,
DOMImplementationList, DOM features, DOMStringList, StringExtended,
read-only nodes, EntityReference, CDATASection, replaceWholeText,
isElementContentWhitespace, specified setter, hasReplacementTree
setter, DOM3 configuration parameters, configuration parameters for
DOM3 spec compatible DTD-based node operations, DOM3 DOMError,
DOMErrorHandler, UserDataHandler, DOMLocator, isId and family,
internalSubset, TypeInfo and schemaTypeInfo, DOM3 LS, namespaces for
DOM3 events, EventException, MutationEvent, MutationNameEvent,
TextEvent, DocumentEvent->canDispatch, DocumentType->implementation,
Document->createXHTMLDocument, URIReference, InternetMediaType,
MANAKAI_FILTER_OPAQUE, Document->manakaiCreateSerialWalker,
SerialWalker.  HTMLElement->irrelevant, HTMLAnchorElement->media,
HTMLAreaElement->media, HTMLCommandElement, HTMLDataGridElement,
HTMLEventSourceElement, HTMLIsIndexElement, HTMLLegendElement->form,
HTMLMenuElement->autosubmit, HTMLBlockquoteElement,
HTMLStrictlyInlineContainerExtended,
HTMLStructuredInlineContainerExtended,
HTMLStructuredInlineContainerExtended, HTMLSectioningElementExtended,
HTMLListElementExtended, HTMLDListElementExtended.  Overloaded
operators C<==>, C<!=>, and C<.=>, write operations through overloaded
C<@{}> and C<%{}> operators for NodeList, NamedNodeMap, and
HTMLCollection.  Attr, Entity, and AttributeDefinition nodes can no
longer contain Text nodes.

By default the C<DocumentType> node can no longer contain
C<ProcessingInstruction> nodes as children.  The old behavior can be
restored by setting a true value to the
C<manakai-allow-doctype-children> configuration parameter (See
L<Web::DOM::Configuration>).

The C<strict_error_checking> attribute no longer disables random
exceptions as defined in DOM3 specification; its scope is formally
defined in the manakai DOM Extensions specification [MANAKAI].

=head1 TODO

The initial milestone of the project is reimplementing the subset of
DOM supported by the original manakai's DOM implementation
<https://github.com/wakaba/manakai/tree/master/lib/Message/DOM>,
except for obsolete features.  Following features will be
(re)implemented in due course:

=over 4

=item Window [HTML]

=item CSSOM

=item manakai CSSOM/Window extensions

Element.prototype.manakaiComputedStyle,
Window.prototype.manakaiGetComputedStyle, Window.prototype.setDocument

=item Atom DOM [ATOMDOM]

=item WebVTT DOM [HTML]

=back

More features not supported by previous versions of manakai DOM
implementation are expected to be implemented as well, including but
not limited to:

=over 4

=item HTMLFormControlsCollection, HTMLOptionsCollection [HTML]

=item Mutation observers [DOM]

=item Selectors API Level 2 features

=item New mutation methods [DOM]

prepend, append, before, after, replace, remove

=item DOM Ranges

DOM Ranges interfaces and methods [DOM]; Ranges support in DOM Core
methods and attributes [DOM]; Range.prototype.createContextualFragment
[DOMPARSING].

=back

In addition, source codes of the modules include many "XXX" markers,
indicating TODO items.

=head1 LIMITATIONS

Methods returning the index or position in some list or string, whose
IDL type is a number type, do not convert the value as specified by
the WebIDL specification and the DOM Perl Binding specification.  This
should not be a problem as it is not realistic to have lists of items
whose length is greater than, or nearly equal to 2**31 in both Perl's
runtime environment and realworld use cases.

Although the modules implement APIs as used in the Web platform, they
does not support the Web's security model, i.e. the same-origin
policy.  It does not make sense for Perl applications.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2012-2013 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
