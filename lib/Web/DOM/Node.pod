=head1 NAME

Web::DOM::Node - The DOM |Node| object

=head1 DESCRIPTION

The C<Web::DOM::Node> class implements the DOM C<Node> interface.  The
C<Web::DOM::Node> class is an abstract class.  It is used as
subclasses such as C<Web::DOM::Element> and C<Web::DOM::Document>.

=head1 METHODS

Following methods are available:

=over 4

=item $child = $node->append_child ($child)

Append the specified node to the list of child nodes.  [DOM]

=item $node_list = $node->child_nodes

Return the live list, i.e. L<Web::DOM::NodeList>, of the child nodes
of the node.  [DOM]

=item $node2 = $node->clone_node ($deep)

Return the newly-created clone of the node.  If the argument is set to
the true value, any descendant nodes are also cloned.  [DOM]
[DOMATTREXODUS] [MANAKAI]

=item $value = $node1->compare_document_position ($node2)

Return the result of comparison of document positions of two nodes.
The result is represented as the bitmask of constants listed in the
later section.  [DOM] [DOM3CORE]

=item $bool = $node1->contains ($node2)

Return whether the node specified as the argument is the descendant of
the context node or not.  [DOM]

=item $child = $node->first_child

Return the first child node of the node.  If there is no child,
C<undef> is returned.  [DOM]

=item $bool = $node->has_attributes

Return whether the node has any content attribute or not.
[DOMATTREXODUS]

=item $child = $node->insert_before ($child, $ref_child)

Insert the specified node just after the specified node.  [DOM]

=item $bool = $node->is_default_namespace ($nsurl)

Return whether the specified namespace URL is the default namespace or
not.  [DOM]

=item $bool = $node1->is_equal_node ($node2)

Return whether two nodes are equal or not.  [DOM] [DOMATTREXODUS]
[MANAKAI]

=item $bool = $node->has_child_nodes

Return whether the node has children or not.  [DOM]

=item $bool = $node1->is_same_node ($node2)

Return whether two nodes are same or not.  [DOM3CORE] [MANAKAI]

=item $child = $node->last_child

Return the last child node of the node.  If there is no child,
C<undef> is returned.  [DOM]

=item $url = $node->lookup_namespace_uri ($prefix)

Return the namespace URL which might be associated with the specified
prefix.  The C<undef> value can be specified for the default
namespace.  [DOM] [DOMATTREXODUS] [DOM3CORE]

=item $prefix = $node->lookup_prefix ($nsurl)

Return the namespace prefix which might be associated with the
specified namespace URL.  [DOM] [DOMATTREXODUS] [DOM3CORE]

=item $sibling = $node->next_sibling

Return the next sibing node of the node.  If there is no such node,
C<undef> is returned.  [DOM] [DOMATTREXODUS]

=item $string = $node->node_name

Return the name of the node.  [DOM] [DOMATTREXODUS] [DOMDTDEF]

=item $number = $node->node_type

Return the constant number representing the type of the node.  [DOM]
[DOMATTREXODUS] [DOMDTDEF]

=item $text = $node->node_value

=item $node->node_value ($text)

Get or set the value of the node.  For L<Web::DOM::CharacterData>
objects, this is equivalent to the C<data> method.  For
L<Web::DOM::Attr> objects, this is equivalent to the C<value> method.
For other kinds of nodes, this method has no effect.  [DOM]
[DOMATTREXODUS]

=item $node->normalize

Normalize descendant contigious C<Text> nodes, if any.  [DOM]

=item $doc = $node->owner_document

Return the node document, i.e. the document the node belongs to,
except for the document node, fot which the C<undef> value is
returned.  [DOM]

=item $parent = $node->parent_element

Return the parent element of the node.  If there is no parent element,
C<undef> is returned.  [DOM]

=item $parent = $node->parent_node

Return the parent node of the node.  If there is no parent, C<undef>
is returned.  [DOM] [DOMATTREXODUS]

=item $sibling = $node->previous_sibling

Return the previous sibling of the node.  If there is no such node,
C<undef> is returned.  [DOM] [DOMATTREXODUS]

=item $old_child = $node->remove_child ($old_child)

Remove a node from the list of child nodes of the node.  [DOM]

=item $new_child = $node->replace_child ($new_child, $ref_child)

Replace the specified child node by a new node.  The first argument is
the new child node.  The second argument is the current child node,
which is to be replaced.  The new child node is returned.  [DOM]

=item $string = $node->text_content

=item $node->text_content ($string)

Return or set the text data of the node.  [DOM] [DOMATTREXODUS]
[MANAKAI]

If the node is an C<Element> or C<DocumentFragment>, setter: The
content of the node is replaced by a new C<Text> node if the new text
data is not the empty string.  If the node has child nodes, they are
removed.

If the node is a C<CharacterData> or C<Attr>: The data of the node is
returned or replaced.

Otherwise, the method returns C<undef> and the setter has no effect.

=back

Following methods are also available: C<attributes>, C<prefix>,
C<namespace_uri>, C<local_name>, and C<manakai_local_name>.
[DOMATTREXODUS] [DOMNODEEXODUS] [MANAKAI]

=head1 CONSTANTS

Constants are exported from the L<Web::DOM::Node> module by default.
In addition, they are accessible as methods of C<Node> objects.

=over 4

=item Node type constants

Following constants are defined for the C<node_type> attribute:

ELEMENT_NODE ATTRIBUTE_NODE TEXT_NODE CDATA_SECTION_NODE
ENTITY_REFERENCE_NODE ENTITY_NODE PROCESSING_INSTRUCTION_NODE
COMMENT_NODE DOCUMENT_NODE DOCUMENT_TYPE_NODE DOCUMENT_FRAGMENT_NODE
NOTATION_NODE [DOM] [DOMATTREXODUS] [DOM3]

XPATH_NAMESPACE_NODE [DOMXPATH]

ELEMENT_TYPE_DEFINITION_NODE ATTRIBUTE_DEFINITION_NODE [DOMDTDEF]

=item Document position constants

Following constants are defined for the C<compare_document_position>
method:

DOCUMENT_POSITION_DISCONNECTED DOCUMENT_POSITION_PRECEDING
DOCUMENT_POSITION_FOLLOWING DOCUMENT_POSITION_CONTAINS
DOCUMENT_POSITION_CONTAINED_BY
DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC [DOM]

=back

=head1 SPECIFICATIONS

=over 4

=item DOM

DOM Living Standard <http://dom.spec.whatwg.org/#interface-document>.

=item DOMATTREXODUS, DOMNODEEXODUS

DOM Standard <view-source:http://dom.spec.whatwg.org/>.

=item DOM3CORE

Document Object Model (DOM) Level 3 Core Specification
<http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/DOM3-Core.html#core-ID-1950641247>.

=item DOMXPATH

Document Object Model XPath
<http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html>.

=item DOMDTDEF

DOM Document Type Definition Module
<http://suika.fam.cx/www/markup/xml/domdtdef/domdtdef-work>.

=item MANAKAI

manakai DOM Extensions
<http://suika.fam.cx/~wakaba/wiki/sw/n/manakai%20DOM%20Extensions>.

=back

=head1 SEE ALSO

L<Web::DOM::Element>, L<Web::DOM::Document>,
L<Web::DOM::DocumentType>, L<Web::DOM::DocumentFragment>,
L<Web::DOM::CharacterData>, L<Web::DOM::Attr>, L<Web::DOM::Entity>,
L<Web::DOM::EntityReference>, L<Web::DOM::Notation>,
L<Web::DOM::ElementTypeDefinition>, L<Web::DOM::AttributeDefinition>.

L<Web::DOM::NodeList>, L<Web::DOM::HTMLCollection>,
L<Web::DOM::NamedNodeMap>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2012 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
