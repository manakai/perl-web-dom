=head1 NAME

Web::DOM::Document - The DOM |Document| object

=head1 DESCRIPTION

The C<Web::DOM::Document> class implements the DOM C<Document>
interface, which represents the document (either HTML or XML).

=head1 METHODS

In addition to the methods of classes L<Web::DOM::EventTarget>,
L<Web::DOM::Node>, L<Web::DOM::ParentNode>, and
L<Web::DOM::XPathEvaluator>, following methods are available:

=over 4

=item $doc = new Web::DOM::Document

Create a new document object. [DOM]

=item $node = $doc->adopt_node ($node)

Change the node document (i.e. the C<owner_document> attribute value)
of the specified node and its descendant nodes to the document.  [DOM]
[HTML]

=item $bool = $doc->all_declarations_processed

=item $doc->all_declarations_processed ($bool)

Return or set the [all declarations processed] property value of the
document.  [MANAKAI]

=item $el = $doc->atom_feed_element

Return the document element, if it is the C<atom:feed> element.
[ATOMDOM]

=item $el = $doc->body

=item $doc->body ($el)

Return or set the body element of the document (i.e. the C<body>
element or the C<frameset> element).  [HTML]

=item $string = $doc->character_set

=item $string = $doc->charset

=item $string = $doc->input_encoding

=item $doc->input_encoding ($string)

Return or set the encoding of the document.  [DOM] [MANAKAI]

=item $string = $doc->manakai_charset

=item $doc->manakai_charset ($string)

Return or set the C<charset> parameter value of the C<Content-Type>
metadata.  [MANAKAI]

=item $string = $doc->compat_mode

Return C<BackComat> if the document is in the quirks mode, or
C<CSS1Compat> otherwise.  [DOM]

=item $string = $doc->manakai_compat_mode

=item $doc->manakai_compat_mode ($string)

Get or set the mode of the document.  The value can be one of:
C<no quirks>, C<limited quirks>, and C<quirks>.  [MANAKAI]

=item $string = $doc->content_type

Return the MIME type of the document.  [DOM]

=item $attr = $doc->create_attribute ($local_name)

Create a new attribute (L<Web::DOM::Attr>) with the specified name and
empty value.  [MANAKAI]

=item $attr = $doc->create_attribute_ns ($nsurl, $qname)

=item $attr = $doc->create_attribute_ns ($nsurl, [$prefix, $local_name])

Create a new attribute (L<Web::DOM::Attr>) with the specified
namespace URL and qualified name.  [MANAKAI]

The qualified name can be represented as an array reference, where the
first item is the prefix (or C<undef> for the null namespace) and the
second item is the local name.  [DOMPERL]

=item $adef = $doc->create_attribute_definition ($name)

Create an attribute definition (L<Web::DOM::AttributeDefinition>) with
the specified name.  [DOMDTDEF]

=item $doc->create_cdata_section ($text)

Throw a "NotSupportedError" exception.  The C<CDATASection> interface
is obsolete.  [MANAKAI]

=item $comment = $doc->create_comment ($data)

=item $comment = $doc->create_comment (\$data)

Create a new comment (L<Web::DOM::Comment>) with the specified data.
[DOM]

=item $dt = $doc->create_document_type_definition ($name)

Create a new document type (L<Web::DOM::DocumentType>) with the
specified name.  [DOMDTDEF]

=item $el = $doc->create_element ($local_name)

Create a new element (L<Web::DOM::HTMLElement>) with the specified
local name in the HTML namespace.  [DOM] [HTML] [MANAKAI]

=item $el = $doc->create_element_ns ($nsurl, $qname)

=item $el = $doc->create_element_ns ($nsurl, [$prefix, $local_name])

Create a new element (L<Web::DOM::Element>) with specified namespace
URL and qualified name.  [DOM] [HTML] [MANAKAI]

The qualified name can be represented as an array reference, where the
first item is the prefix (or C<undef> for the null namespace) and the
second item is the local name.  [DOMPERL]

=item $et = $doc->create_element_type_definition ($name)

Create a new element type definition
(L<Web::DOM::ElementTypeDefinition>) with the specified name.
[DOMDTDEF]

=item $doc->create_entity_reference ($name)

Throw a "NotSupportedError" exception.  The C<EntityReference>
interface is obsolete.  [MANAKAI]

=item $ev = $doc->create_event ($interface)

Create an event object.  The argument specifies the kind of the
object, e.g. C<Event>, C<CustomEvent>, or C<MouseEvent>.  [DOM]

Use L<Web::DOM::Event>'s (or its subclass'es) C<new> method instead.

=item $ent = $doc->create_general_entity ($name)

Create a general entity (L<Web::DOM::Entity>) with the specified name.
[DOMDTDEF]

=item $ni = $doc->create_node_iterator ($root, $what_to_show, $filter)

Create a new node iterator (L<Web::DOM::NodeIterator>).  [DOM]

The first argument is required, specifying the root node of the
iterator.  Second and third arguments are optional, representing bit
vector of node types and code reference, both used to filter candidate
nodes.  For the bit vector, see L<Web::DOM::TypeWalker/"CONSTANTS">.
The code reference would be invoked with an argument (C<$_[1]>) which
is the node in question.  The code is expected to return whether the
node is accepted or not, using one of constants from
L<Web::DOM::TypeWalker/"CONSTANTS">.

=item $notation = $doc->create_notation ($name)

Create a notatioon (L<Web::DOM::Notation>) with the specified name.
[DOMDTDEF]

=item $text = $doc->create_text_node ($data)

=item $text = $doc->create_text_node (\$data)

Create a new text node (L<Web::DOM::Text>) with the given character
string.  [DOM]

=item $touch = $doc->create_touch ($view, $target, $identifier, $page_x, $page_y, $screen_x, $screen_y)

Create a new L<Web::DOM::Touch> with the specified arguments.  [TOUCH]

=item $list = $doc->create_touch_list ($touch1, $touch2, ...)

Create a new L<Web::DOM::TouchList> with the specified
L<Web::DOM::Touch>es.  [TOUCH]

=item $tw = $doc->create_tree_walker ($root, $what_to_show, $filter)

Create a new tree walker (L<Web::DOM::TreeWalker>).  [DOM]

The first argument is required, specifying the root node of the tree
walker.  Second and third arguments are optional, representing bit
vector of node types and code reference, both used to filter candidate
nodes.  For the bit vector, see L<Web::DOM::TypeWalker/"CONSTANTS">.
The code reference would be invoked with an argument (C<$_[1]>) which
is the node in question.  The code is expected to return whether the
node is accepted, rejected, or skipped, using one of constants from
L<Web::DOM::TypeWalker/"CONSTANTS">.

=item $pi = $doc->create_processing_instruction ($target, $data)

Create a new processing instruction node
(L<Web::DOM::ProcessingInstruction>) with the specified target and
data.  [DOM] [MANAKAI]

=item $text = $doc->dir

=item $doc->dir ($text)

Return or set the C<dir> attribute of the C<html> element, if any.
[HTML]

=item $dt = $doc->doctype

Return the L<Web::DOM::DocumentType> node of the document, if any.
[DOM]

=item $el = $doc->document_element

Return the document element of the document, if any.  [DOM]

=item $config = $doc->dom_config

Return the L<Web::DOM::Configuration> object for the document.
[DOM3CORE] [MANAKAI]

=item $col = $doc->embeds

=item $col = $doc->plugins

Return the L<Web::DOM::HTMLCollection> object containing the C<embed>
elements in the document.  [HTML]

=item $string = $doc->manakai_entity_base_uri

=item $doc->manakai_entity_base_uri ($string)

Return or set the base URL of the document entity (not of the
document).  [DOMDTDEF]

See also L<Web::DOM/DEPENDENCY>.

=item $col = $doc->forms

Return the L<Web::DOM::HTMLCollection> object containing the C<form>
elements in the document.  [HTML]

=item $el = $doc->get_element_by_id ($id)

Return the element whose ID is equal to the argument, if any, or
C<undef>.  [DOM]

=item $col = $doc->get_elements_by_name ($name)

Return the L<Web::DOM::NodeList> containing the elements whose C<name>
is equal to the specified value.  [HTML] [MANAKAI]

=item $bool = $doc->manakai_has_bom

=item $doc->manakai_has_bom ($bool)

Return or set whether the byte representation of the document has the
BOM or not.  [MANAKAI]

=item $el = $doc->head

=item $el = $doc->manakai_head [DEPRECATED]

Return the C<head> element of the document, if any, or C<undef>.
[HTML] [MANAKAI]

=item $el = $doc->manakai_html

Return the C<html> element of the document, if any, or C<undef>.
[MANAKAI]

=item $col = $doc->images

Return the L<Web::DOM::HTMLCollection> object containing the C<img>
elements in the document.  [HTML]

=item $impl = $doc->implementation

Return the L<Web::DOM::Implementation> object associated to the
document.  [DOM]

=item $node2 = $doc->import_node ($node1, $deep)

Return the newly-created clone of the specified node, belonging to the
document.  If the second argument is set to the true value, any
descendant nodes are also cloned.  [DOM] [DOMATTREXODUS] [HTML]
[MANAKAI]

=item $bool = $doc->manakai_is_html

=item $doc->manakai_is_html ($bool)

Return or set whether the document is an HTML document or not.
[MANAKAI]

=item $bool = $doc->manakai_is_srcdoc

=item $doc->manakai_is_srcdoc ($bool)

Return or set whether the document is an C<iframe> C<srcdoc> document
or not.  [MANAKAI]

=item $doc->manakai_set_url ($string)

Set the document's address.  [MANAKAI]

See also L<Web::DOM/DEPENDENCY>.

=item $col = $doc->links

Return the L<Web::DOM::HTMLCollection> object containing the C<a> or
C<area> elements with the C<href> attribute in the document.  [HTML]

=item $col = $doc->scripts

Return the L<Web::DOM::HTMLCollection> object containing the C<script>
elements in the document.  [HTML]

=item $bool = $doc->strict_error_checking

=item $doc->strict_error_checking ($bool)

Return or set whether some error checks should be skipped or not.
[DOM3CORE] [MANAKAI]

=item $string = $doc->title

=item $doc->title ($string)

Return or set the title of the document.  [HTML] [SVG]

=item $string = $doc->url

=item $string = $doc->document_uri

Return the URL of the document (or the document's address).  [DOM]
[HTML]

=item $string = $doc->xml_encoding

=item $doc->xml_encoding ($string)

Return or set the C<encoding> pseudo-attribute value of the XML
declaration of the document, if it is an XML document.  The C<undef>
value represents omission of the pseudo-attribute.  [DOM3CORE]
[MANAKAI]

=item $bool = $doc->xml_standalone

=item $doc->xml_standalone ($bool)

Return or set the C<standalone> pseudo-attribute value of the XML
declaration of the document, if it is an XML document.  The true value
represents the C<true> attribute value, while the false value
represents the C<false> attribute value.  [DOM3CORE]

=item $string = $doc->xml_version

=item $doc->xml_version ($string)

Return or set the XML version of the document.  The value must be
C<1.0> or C<1.1>.  This is the value of the C<version>
pseudo-attribute of the XML declaration of the document, if it is an
XML document.  [DOM3CORE]

=back

Additionally, the following obsolete methods are available: C<all>,
C<anchors>, C<applets>, and C<clear>.  [HTML]

=head1 SPECIFICATIONS

=over 4

=item DOM

DOM Living Standard <http://dom.spec.whatwg.org/#interface-document>.

=item DOM3CORE

Document Object Model (DOM) Level 3 Core Specification
<http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/DOM3-Core.html>.

=item HTML

HTML Living Standard
<http://www.whatwg.org/specs/web-apps/current-work/>.

=item SVG

SVG
<https://svgwg.org/svg2-draft/single-page.html#struct-InterfaceSVGDocument>.

=item TOUCH

Touch Events
<https://dvcs.w3.org/hg/webevents/raw-file/v1/touchevents.html>.

=item DOMDTDEF

DOM Document Type Definitions
<http://suika.suikawiki.org/www/markup/xml/domdtdef/domdtdef>.

=item ATOMDOM

Atom DOM <http://suika.suikawiki.org/www/markup/xml/atomdom>.

=item DOMXPATH

Document Object Model XPath
<http://www.w3.org/TR/DOM-Level-3-XPath/xpath.html#XPathEvaluator>.

=item DOMPERL

manakai's DOM Perl Binding
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai%27s%20DOM%20Perl%20Binding>.

=item MANAKAI

manakai DOM Extensions
<http://suika.suikawiki.org/~wakaba/wiki/sw/n/manakai++DOM%20Extensions>.

=back

=head1 SEE ALSO

L<Web::DOM::Node>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2012-2013 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
